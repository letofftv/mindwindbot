import os
import openai
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

BOT_TOKEN = os.getenv("BOT_TOKEN")
openai.api_key = os.getenv("OPENAI_API_KEY")

CHOOSE_ACTION, ASK_QUESTION, ASK_MAP_TYPE, ASK_MAP_QUESTIONS = range(4)

main_menu = ReplyKeyboardMarkup(
    [['üß† –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', 'üó∫Ô∏è –°–æ–∑–¥–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É']],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–æ—Ç. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=main_menu
    )
    return CHOOSE_ACTION

async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é' in text:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.")
        return ASK_QUESTION

    elif '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É' in text:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–∞—Ä—Ç—ã:\n1. –ë–∞–∑–æ–≤–∞—è (4 –≤–æ–ø—Ä–æ—Å–∞)\n2. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è (10 –≤–æ–ø—Ä–æ—Å–æ–≤)")
        return ASK_MAP_TYPE

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return CHOOSE_ACTION

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_question = update.message.text

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π —Å–ø–æ–∫–æ–π–Ω–æ, –º—è–≥–∫–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ."},
                {"role": "user", "content": user_question}
            ]
        )
        answer = response.choices[0].message.content.strip()
    except Exception as e:
        answer = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    await update.message.reply_text(f"üîç –û—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞:\n\n{answer}")
    return CHOOSE_ACTION

async def ask_map_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text.startswith("1"):
        context.user_data['map_type'] = 'base'
        context.user_data['questions'] = [
            "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?",
            "–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç—Ä–µ–≤–æ–∂–∏—Ç?",
            "–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º?",
            "–û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª(–∞) —Å–µ–±—è –æ—Å–æ–±–µ–Ω–Ω–æ —Å—á–∞—Å—Ç–ª–∏–≤—ã–º(–æ–π)."
        ]
    elif text.startswith("2"):
        context.user_data['map_type'] = 'extended'
        context.user_data['questions'] = [
            "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?",
            "–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç—Ä–µ–≤–æ–∂–∏—Ç?",
            "–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º?",
            "–û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª(–∞) —Å–µ–±—è –æ—Å–æ–±–µ–Ω–Ω–æ —Å—á–∞—Å—Ç–ª–∏–≤—ã–º(–æ–π).",
            "–ö–∞–∫ —Ç—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Å–≤–æ—ë –¥–µ—Ç—Å—Ç–≤–æ?",
            "–ö–∞–∫–∏–µ —É —Ç–µ–±—è –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –±–ª–∏–∑–∫–∏–º–∏?",
            "–ß—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É —Ç–µ–±—è —á—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã?",
            "–ö–∞–∫ —Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å —Å–≤–æ—ë –±—É–¥—É—â–µ–µ?",
            "–ö–∞–∫–∏–µ —É —Ç–µ–±—è —Ü–µ–ª–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥?",
            "–ß–µ–≥–æ —Ç—ã –±–æ–∏—à—å—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"
        ]
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ 1 –∏–ª–∏ 2.")
        return ASK_MAP_TYPE

    context.user_data['answers'] = []
    return await ask_next_question(update, context)

async def ask_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    questions = context.user_data['questions']
    answers = context.user_data['answers']

    if len(answers) < len(questions):
        await update.message.reply_text(questions[len(answers)])
        return ASK_MAP_QUESTIONS
    else:
        text = "\n\n".join(f"{q}\n‚û° {a}" for q, a in zip(questions, answers))
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ö–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        admin_chat_id = "–í–ê–®_TG_ID"
        await context.bot.send_message(chat_id=admin_chat_id, text=f"üó∫Ô∏è –ù–æ–≤–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞:\n\n{text}")
        return CHOOSE_ACTION

async def collect_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers'].append(update.message.text)
    return await ask_next_question(update, context)

app = ApplicationBuilder().token(BOT_TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        CHOOSE_ACTION: [MessageHandler(filters.TEXT, choose_action)],
        ASK_QUESTION: [MessageHandler(filters.TEXT, ask_question)],
        ASK_MAP_TYPE: [MessageHandler(filters.TEXT, ask_map_type)],
        ASK_MAP_QUESTIONS: [MessageHandler(filters.TEXT, collect_answer)],
    },
    fallbacks=[]
)

app.add_handler(conv_handler)
app.run_polling()
